((3) 4 (((submod #"C:\\ss\\ss.rkt" structures) . deserialize-info:environment-v0) ((submod #"C:\\ss\\ss.rkt" structures) . deserialize-info:special-v0) ((submod #"C:\\ss\\ss.rkt" structures) . deserialize-info:subprogram-v0) ((submod #"C:\\ss\\ss.rkt" structures) . deserialize-info:rewriter-v0)) 14 ((0 none (h ! (equal) (not ? . 2) (which ? . 4) (get-env b! f primitive environment-defs) (new5 ? . 6) (/ b! f primitive-no-env /) (unquote b! 1 (f eval-ext evaluate-unquote)) (pr b! f primitive-no-env display) (quasiquote b! 1 (f eval-ext evaluate-quasiquote)) (- b! f primitive-no-env -) (new b! 1 (f eval-ext evaluate-new)) (unquote-splicing b! 1 (f eval-ext evaluate-unquote-splicing)) (rewrite b! 1 (f eval-ext evaluate-rewrite)) (prn b! f primitive-no-env displayln) (quit b! f primitive-no-env raise-quit) (del b! 1 (f eval-ext evaluate-del)) (hd b! f primitive-no-env car) (true ? . 8) (set b! 1 (f eval-ext evaluate-set)) (if ? . 11) (false ? . 13) (!prim b! 1 (f primitive-no-env make-primitive)) (quote b! 1 (f eval-ext evaluate-quote)) (* b! f primitive-no-env *) (+ b! f primitive-no-env +) (!prim-no-env b! 1 (f primitive-no-env make-primitive-no-env)) (sub b! 1 (f eval-ext evaluate-sub)) (pair b! f primitive-no-env cons) (tl b! f primitive-no-env cdr))) (2 (? . 0) (q f) (q sub (a b) (f b a))) #&b (2 (? . 0) (q f) (q f "true" "false")) #&b (3 (? . 0) (q name) (q pair (quote new) (pair name (pair (quote 5) (quote ()))))) #&b (2 (? . 0) (q a b) a) #&b (2 (? . 0) (q c t f) (q c (sub () t) (sub () f))) (1 (? . 9)) #&b (2 (? . 0) (q a b) b) #&b) ((11 b! ? . 10) (6 b! ? . 5) (13 b! ? . 12) (4 b! ? . 3) (2 b! ? . 1) (8 b! ? . 7)) (? . 0))